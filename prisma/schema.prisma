// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  name           String?
  password_hash  String?
  status         Status?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  apiTokens      ApiToken[]
  apiAccesses    UserApiAccess[]
  usageLogs      ApiUsageLog[]
  filterAccesses UserFilterAccess[] // user filter access - to handle which filters are allowed for a user
  
  // @@index([status]) // TODO: Add index for status
}

enum Status {
  ACTIVE
  INACTIVE
}

model Api {
  id                  String          @id @default(uuid())
  api_name            String          @unique
  slug                String          @unique
  default_daily_limit Int             @default(100)
  basic_parameters    Json
  advanced_parameters Json
  is_active           Boolean         @default(true)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  userApiAccesses     UserApiAccess[]
  usageLogs           ApiUsageLog[]
  apiFilters          ApiFilter[]

  @@index([is_active])
}

model ApiToken {
  id            String      @id @default(uuid())
  user_id       String      @unique
  token         String      @unique
  is_active     Boolean     @default(true)
  created_at    DateTime    @default(now())
  last_used_at  DateTime?
  refreshed_at  DateTime?

  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model UserApiAccess {
  id          String     @id @default(uuid())
  user_id     String     
  api_id      String     
  daily_limit Int
  has_access  Boolean     @default(true)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  api         Api         @relation(fields: [api_id], references: [id], onDelete: Cascade)

  @@unique([user_id, api_id])
  @@index([user_id, has_access])
}

model ApiUsageLog {
  id                String     @id @default(uuid())
  user_id           String     
  api_id            String     
  endpoint          String
  payload           Json?
  ip_address        String
  status_code       Int?
  error_message     String?
  created_at        DateTime   @default(now())
  api_response_time Float?

  user              User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  api               Api        @relation(fields: [api_id], references: [id], onDelete: Cascade)

  @@index([user_id, api_id, created_at])
  @@index([created_at]) //useful to delete old logs
  @@index([user_id, api_id, status_code]) //useful to get/delete old logs based on status code

}

model ApiFilter {
  id String @id @default(uuid())
  api_id String
  filter_type FilterType
  filter_name String
  is_paid Boolean @default(false)
  is_active Boolean @default(true)
  created_at DateTime @default(now())

  api Api @relation(fields: [api_id], references: [id], onDelete: Cascade)
  userAccesses UserFilterAccess[]
  
  @@unique([api_id, filter_name])
  @@index([api_id, is_active])
}

enum FilterType {
  BASIC
  ADVANCED
}

model UserFilterAccess {
  id String @id @default(uuid())
  user_id String
  filter_id String
  has_access Boolean @default(true)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  filter ApiFilter @relation(fields: [filter_id], references: [id], onDelete: Cascade)

  @@unique([user_id, filter_id])
  @@index([user_id, has_access])
}